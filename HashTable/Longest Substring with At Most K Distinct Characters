Given a string, find the length of the longest substring T that contains at most k distinct characters. 

For example, Given s = “eceba” and k = 2, 

T is "ece" which its length is 3. 

class Solution {
public:
    int lengthOfLongestSubstringKDistinct(string s, int k) {
        unordered_map<char,int> map;
        int begin = 0, end = 0;
        int res = 0;
        int currTotal = 0;
        while(end<s.size()){
            while(end<s.size()){
                map[s[end]]++;
                if(map[s[end]]==1) currTotal++;
                if(currTotal>k) break;
                ++end;
            }
            res = max(res,end-begin);
            while(begin<=end){
                map[s[begin]]--;
                if(map[s[begin]]==0){
                  currTotal--;
                  ++begin;
                  ++end;
                  break;
                }
                ++begin;
            }
        }
        return res;
    }
};

SolutionII
class Solution {
    public:    /**     * @param s : A string     * @return : The length of the longest substring      *           that contains at most                 k distinct characters.     */    
    int lengthOfLongestSubstringKDistinct(string s, int k) {        
    // write your code here        
        if(s.size()==0) return 0;        
        vector<int> map(256,0);        
        int res = 0;        
        int num = 0;        
        int r = 0;        
        for(int l = 0;l<s.size();++l){            
            if(l!=0){                
                map[s[l-1]-'0']--;                
                if(map[s[l-1]-'0']==0) 
                    num--;            
                }           
            while(r<s.size()){              
                if(map[s[r]-'0']==1 && num==k) break;              
                map[s[r]-'0']++           
            }           
            res = max(res, r-l);        
        }        
    return res;    
  }
};
