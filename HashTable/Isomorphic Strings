Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

For example,
 Given "egg", "add", return true.

Given "foo", "bar", return false.

Given "paper", "title", return true.

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.length()!=t.length()) return false;
        
        unordered_map <char, char> s2, t2;
        for(int i=0;i<s.length();i++){
            if(s2.find(s[i])==s2.end() && t2.find(t[i])==t2.end()) {
                s2[s[i]]=t[i];
                t2[t[i]]=s[i];
            }
            if(s2.find(s[i])!=s2.end() && t2.find(t[i])!=t2.end()){
                if(s2[s[i]]!=t[i] || t2[t[i]]!=s[i]) return false;
            }
            else return false;
        }
       return true;
    }
};
//map::find(): Searches the container for an element with a key equivalent to k and returns an iterator to it if found, 
                otherwise it returns an iterator to map::end.
