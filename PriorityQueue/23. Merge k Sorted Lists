Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
       if(lists.size()==0) return NULL;
       ListNode* preHead = new ListNode(0);
       ListNode* curr = preHead;
       priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>> pq;
       
       vector<ListNode*> index;
       for(int i = 0;i<lists.size();++i){
           
           ListNode* temp = lists[i];
           if(lists[i]!=NULL) pq.push(make_pair(temp->val,i));
           index.push_back(temp); 
           
       }
       while(!pq.empty()){
           auto temp = pq.top();
           pq.pop();
           ListNode* newNode = new ListNode(temp.first);
           curr->next = newNode;
           curr = newNode;
           
           index[temp.second] = index[temp.second]->next;
           if(index[temp.second]!=NULL) pq.push(make_pair(index[temp.second]->val, temp.second));
       }
       
       return preHead->next;
       
    }
};
