Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree. 

For example: 

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true. 

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false. 

class Solution {
public:
    bool validTree(int n, vector<pair<int, int>>& edges) {
       vector<int> nodes(n);
       for(int i=0; i<n; ++i) nodes[i] = i;
       for(auto e: edges){
           int f = e.first;
           int s = e.second;
           while(f!=nodes[f]) f=nodes[f];
           while(s!=nodes[s]) s=nodes[s];
           if(nodes[f] == nodes[s]) return false;
           nodes[s] = nodes[f];
       }
       return edges.size()==n-1;
    }
};

II;
class Solution {
private: 
    vector<int> v;
    int find(int x){
        while(x!=v[x]) x=v[x];
        return x;
    }
public:
    bool validTree(int n, vector<pair<int, int>>& edges) {
        int count=n;
       for(int i=0;i<n;++i) v.push_back(i);
       for(auto e:edges){
           int x = find(e.first);
           int y = find(e.second);
           if(x==y) return false;
           v[y]=v[x];
           --count;
       }
       return count==1;
    }
};
