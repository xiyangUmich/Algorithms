Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.

class Solution {
    unordered_map<int,int> map;
    unordered_map<int,int> size;
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0) return 0;
        int res = 1;
        for(int n:nums){
           map[n] = n;
           size[n] = 1;
        } 
        for(auto n:nums){
            if(map.find(n-1)!=map.end()){
                int rootn = findRoot(n);
                int root2 = findRoot(n-1);
                if(rootn!=root2){
                    map[root2] = rootn;
                    size[root2] +=size[rootn];
                    size[rootn] = size[root2];
                    res = max(res,size[rootn]);
                }
            }
            if(map.find(n+1)!=map.end()){
                int rootn = findRoot(n);
                int root2 = findRoot(n+1);
                if(rootn!=root2){
                    map[root2] = rootn;
                    size[root2] +=size[rootn];
                    size[rootn] = size[root2];
                    res = max(res,size[rootn]);
                }
            }
        }
        return res;
    }
    int findRoot(int n){
        if(map[n]==n) return n;
        map[n] = findRoot(map[n]);
        return map[n];
    }
};
