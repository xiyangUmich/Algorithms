Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head==NULL || head->next==NULL) return head;
       ListNode* p=head;
       ListNode* s=head;
       ListNode* b=head;
       ListNode* temp=head;
       if(head->val>=x){
           b=head;
           while(p->next!=NULL && p->next->val>=x){
               b=p->next;
               p=p->next;
           }
           if(p->next==NULL) return head;
           if(p->next->val<x){
               s=p->next;
               temp=s->next;
               s->next=head;
               head=s;
               p->next=temp;
              
           }
       }
        else if(head->val<x){
           s=head;
           while(p->next!=NULL && p->next->val<x){
               s=p->next;
               p=p->next;
           }
           if(p->next==NULL) return head;
           if(p->next->val>=x){
               b=p->next;
               p=p->next;
           }
       }
       
       
       while(p->next!=NULL){
           if(p->next->val>=x){
               b=p->next;
               p=p->next; 
           }
         else{
             temp=p->next->next;
             p->next->next=s->next;
             s->next=p->next;
             s=p->next;
             p->next=temp;
         }
       }
       return head;
    }
};
