You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.You may assume the two numbers do not contain any leading zero, except the number 0 itself.Follow up: What if you cannot modify the input lists? In other words, reversing the lists is not allowed. 



/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */class Solution {public:    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {        int n1 = 0,n2 = 0;        ListNode* curr1 = l1;        ListNode* curr2 = l2;        while(curr1){            n1++;            curr1 = curr1->next;        }        while(curr2){            n2++;            curr2 = curr2->next;        }        ListNode* res = NULL;        curr1 = l1;        curr2 = l2;        while(n1>0 && n2>0){            int sum = 0;            if(n1>=n2) {sum+=curr1->val; curr1 = curr1->next; n1--;}            if(n2>n1) {sum+=curr2->val; curr2 = curr2->next; n2--;}            ListNode* temp = new ListNode(sum);            temp->next = res;            res = temp;        }               int mark = 0;        ListNode* prior = NULL;        ListNode* next = res->next;        while(res){            int t = res->val+mark;              mark = t/10;             res->val= t%10;             next = res->next;             res->next = prior;             prior = res;             if(!next) break;             res = next;        }        if(mark!=0){           ListNode* temp = new ListNode(mark);           temp->next = res;           res = temp;        }         return res;    }};
