Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {

public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* preHead = new ListNode(0);
        preHead ->next = head;
        ListNode* curr = head;
        ListNode* pre = preHead;
        
        while(curr) {
            int num = 0;
            ListNode* begin = curr;
            while(num<k && curr) {
                curr = curr->next;
                num++;
            }
            if(num < k) return preHead->next;
            
            pre->next = reverse(begin, curr);
            begin->next = curr;
            pre = begin;
        }
        
        return preHead -> next;
    }
    ListNode* reverse(ListNode* begin, ListNode* end) {
        ListNode* pre = begin;
        ListNode* curr = begin->next;
        while(curr != end) {
            ListNode* next = curr->next;
            curr->next = pre;
            pre = curr;
            curr = next;
        }
        return pre;
    }
};
