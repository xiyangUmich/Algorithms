You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
      int n1=0, n2=0, mark=0;
      int sum=0;
      ListNode* preHead = new ListNode(0);
      ListNode* pre = preHead;
      
      while(l1 || l2){
          n1=l1!=NULL? l1->val:0;
          n2=l2!=NULL? l2->val:0;
          sum = (n1+n2+mark)%10;
          mark = (n1+n2+mark)/10;
          ListNode* curr = new ListNode(sum);
          pre->next = curr;
          pre = curr;
          if(l1!=NULL) l1 = l1->next;
          if(l2!=NULL) l2 = l2->next;
      }
      if(mark !=0){
          ListNode* curr = new ListNode(mark);
          pre->next = curr;
      }
      return preHead->next;
    }
};
