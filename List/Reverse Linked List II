Reverse a linked list from position m to n. Do it in-place and in one-pass. 

For example:
 Given 1->2->3->4->5->NULL, m = 2 and n = 4, 

return 1->4->3->2->5->NULL. 

Note:
 Given m, n satisfy the following condition:
 1 ≤ m ≤ n ≤ length of list. 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
     ListNode* headNew = new ListNode(0);
     headNew->next = head;
     ListNode* pre = headNew;
     ListNode* curr;
     ListNode* move;
     for(int i=0;i<m-1;++i)
        pre=pre->next;
    curr=pre->next;
    for(int i=0;i<n-m;++i){
        move=curr->next;
        curr->next=move->next;
        move->next=pre->next;
        pre->next=move;
        
    }
       return headNew->next;
    }
};
