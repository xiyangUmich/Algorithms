Given a singly linked list L: L0→L1→…→Ln-1→Ln,
 reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→… 

You must do this in-place without altering the nodes' values.

For example,
 Given {1,2,3,4}, reorder it to {1,4,2,3}. 

Method #1           //Time limite Problem
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    void reorderList(ListNode* head) {
        if(head == NULL) return;
      head = helper(head, NULL); 
    }
    ListNode* helper(ListNode* begin, ListNode* end){
        if(begin->next==end){
            begin->next = NULL;
             return begin;
        }
        if(begin->next->next == end){
            begin->next->next =NULL;
            return begin;
        }
        ListNode* temp = begin;
        while(temp->next!=end) temp = temp->next;
        ListNode* next = begin->next;
        begin->next = temp;
        temp->next = helper(next, temp);
        return begin;
    }
};

//Method 2.   No Problem
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    void reorderList(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast!=NULL && fast->next!=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode* pre = NULL;
        ListNode* curr = slow;
        ListNode* next = slow;
        while(curr!=NULL){
            next = curr->next;
            curr->next = pre;
            pre = curr;
            curr = next;
        }
        fast = head;
        while(fast!=slow){
          curr = fast->next;
          fast->next = pre;
          fast = curr;
          if(fast==pre) break;
          curr = pre->next;
          pre->next = fast;
          pre = curr;
        }
       
    }
};
