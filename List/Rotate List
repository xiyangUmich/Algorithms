Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
 Given 1->2->3->4->5->NULL and k = 2,
 return 4->5->1->2->3->NULL.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL || head->next==NULL) return head;
        
       ListNode* curr=head;
       ListNode* rear;
       int n=1;
       
       while(curr->next!=NULL){
           ++n;
           curr=curr->next;
       }
       rear=curr;
       
       k=k%n;
       if(k==0) return head;
       int begin=n-k+1;
       
       curr=head->next;
       ListNode* pre=head;
       for(int i=2;i<begin;++i){
           pre=curr;
           curr=curr->next;
       }
       rear->next=head;
       pre->next=NULL;
       head=curr;
       return head;
    }
};
