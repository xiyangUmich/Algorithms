Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        int start=0;
        vector<vector<int>> res;
        vector<int> path;
        helper(res,path,0,target,candidates);
        return res;
        
    }
    void helper(vector<vector<int>> &res, vector<int> &path, int start, int target, vector<int>& candidates){
        if(target==0){
            res.push_back(path);
            return;
        }
        if(target<=0) return;
        int i=start;
        while(i<candidates.size()){
            path.push_back(candidates[i]);
            helper(res,path,i+1,target-candidates[i],candidates);
            path.pop_back();
            ++i;
            while(i<candidates.size() && candidates[i]==candidates[i-1]) ++i;
        }
    }
};
