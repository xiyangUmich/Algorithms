Given a string containing only digits, restore it by returning all possible valid IP address combinations.

For example:
 Given "25525511135", 

return ["255.255.11.135", "255.255.111.35"]. (Order does not matter) 

class Solution {
public:
    int getNum(string &s, int begin, int end){
        int temp=0;
        for(int i=begin;i<=end;++i) temp = temp*10 + (s[i]-'0');
        return temp;
    }
    void helper(vector<vector<int>> &res, vector<int> &path, int start, int num, string &s){
        if(num==5 && start==s.size()){
            res.push_back(path);
            return;
        }
        if((num==4 && s.size()-start>3)||num==5) return;
        for(int i=0;i<=2 &&(start+i)<s.size();++i){
            int temp = getNum(s,start, start+i);
            if(temp<=255){
                path.push_back(temp);
                helper(res, path, start+i+1, num+1, s);
                path.pop_back();
            }
            if(temp==0) break;
        }
    }
    vector<string> restoreIpAddresses(string s) {
        vector<int> path;
        vector<vector<int>> res;
        vector<string> finalRes;
        helper(res, path, 0, 1, s);
        for(auto temp : res){
            string st;
            for(int i=0;i<temp.size();++i){
                st=st+to_string(temp[i])+".";
            }
            st.pop_back();
            finalRes.push_back(st);
        }
       return finalRes;     
    }
    
};

//Method II: Updated
class Solution {
public:
    void helper(vector<string> &res, string path, int start, int num, string &s){
        if(num==5 && start==s.size()){
            path.pop_back();
            res.push_back(path);
            return;
        }
        if((num==4 && s.size()-start>3)||num==5) return;
        for(int i=0;i<=2 &&(start+i)<s.size();++i){
            int temp = stoi(string(s,start, i+1));
            if(temp<=255){
                string ss = string(s,start,i+1)+".";
             
                helper(res, string(path+ss), start+i+1, num+1, s);
                
            }
            if(temp==0) break;
        }
    }
    vector<string> restoreIpAddresses(string s) {
        string path;
        vector<string> res;
        
        helper(res, path, 0, 1, s);
       return res;     
    }
    
};
