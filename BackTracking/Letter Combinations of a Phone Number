Given a digit string, return all possible letter combinations that the number could represent. 

A mapping of digit to letters (just like on the telephone buttons) is given below.


Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        unordered_map<char, string> map;
        map['2']="abc";
        map['3']="def";
        map['4']="ghi";
        map['5']="jkl";
        map['6']="mno";
        map['7']="pqrs";
        map['8']="tuv";
        map['9']="wxyz";
        vector<string> res;
        string path;
        helper(res, path, 0, digits, map);
        return res;
    }
    void helper(vector<string>& res, string& path, int index, string& digits, unordered_map<char,string>& map){
        if(digits.size()!=0 && path.size()==digits.size()){
            res.push_back(path);
            return;
        }
        for(int i=0;i<map[digits[index]].size();++i){
            path.push_back(map[digits[index]][i]);
            helper(res, path, index+1, digits, map);
            path.pop_back();
        }
    }
};
