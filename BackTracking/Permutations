Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> path;
        int n=nums.size();
        bool used[n]={false};
        helper(res, path, n, used, nums);
        return res;
    }
    void helper(vector<vector<int>>& res, vector<int>& path, int n, bool used[],vector<int>& nums){
        bool mark=false;
        for(int i=0;i<n;++i){
            if(!used[i]){
                path.push_back(nums[i]);
                used[i]=true;
                mark=true;
                helper(res,path,n,used,nums);
                path.pop_back();
                used[i]=false;
            }
        }
        if(!mark) res.push_back(path);
    }
};
