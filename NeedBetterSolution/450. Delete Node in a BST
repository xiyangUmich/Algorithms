Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        TreeNode* pre = new TreeNode(-1);
        pre->right = root;
        TreeNode* parent = pre;
        TreeNode* curr = root;
        while(curr && curr->val != key){
            parent = curr;
            if(curr->val > key){
                curr = curr->left;
            }
            else {
                curr = curr->right;
            }            
        }
        if(curr == NULL) return pre->right;
        if(parent->left == curr){
            if(!curr->right) parent->left = curr->left;
            else if(!curr->left) {
                parent->left = curr->right;
            }
            else {
                TreeNode* left = curr->left;
                TreeNode* right = curr->right;
                TreeNode* temp = right;
                while(temp->left) temp = temp->left;
                temp->left = left;
                parent->left = right;
            }
        }
        else {
            if(!curr->left) parent->right = curr->right;
            else if(!curr->right) {
                parent->right = curr->left;
            }
            else {
                TreeNode* left = curr->left;
                TreeNode* right = curr->right;
                TreeNode* temp = left;
                while(temp->right) temp = temp->right;
                temp->right = right;
                parent->right = left;
            }
        }
        return pre->right;
    }
};
