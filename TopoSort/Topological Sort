Given an directed graph, a topological order of the graph nodes is defined as follow:For each directed edge A -> B in graph, A must before B in the order list.The first node in the order can be any node in the graph with no nodes direct to it.Find any topological order for the given graph.


/** * Definition for Directed graph. * 
struct DirectedGraphNode { 
  *     int label; 
  *     vector<DirectedGraphNode *> neighbors; 
  *     DirectedGraphNode(int x) : label(x) {}; 
  * }; 
 */class Solution {
  public:    /**     * @param graph: A list of Directed graph node     * @return: Any topological order for the given graph.     */             vector<DirectedGraphNode*> topSort(vector<DirectedGraphNode*> graph) {        
    // write your code here               
    if(graph.size()==0) return graph;        
    unordered_map<DirectedGraphNode*, int> mapCount;                
    for(auto g:graph){            
      for(auto n:g->neighbors){                                
        mapCount[n]++;            
      }       
    }                
    queue<DirectedGraphNode*> q;        
    for(auto m:graph) 
      if(mapCount.find(m)==mapCount.end()) q.push(m);        
    vector<DirectedGraphNode*> res;                
    while(!q.empty()){            
      auto temp = q.front();            
      q.pop();            
      res.push_back(temp);            
      for(auto n:temp->neighbors){                
        mapCount[n]--;                
        if(mapCount[n]==0) q.push(n);            
      }         
     }        
     return res;    
    }
   };
