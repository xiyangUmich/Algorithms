There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses? 

//dfs
class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
       vector<vector<int>> courses(numCourses, vector<int>());
       for(auto c: prerequisites){
           courses[c.first]. push_back(c.second);
       }
       
       vector<bool> visited(numCourses, false);
       vector<bool> onStack(numCourses, false);
       bool hasCycle = false;
       
       for(int i=0; i<courses.size(); ++i){
           if(!visited[i]) dfs(i, courses, hasCycle, visited, onStack);
       }
       return !hasCycle;
    }
    
    void dfs(int i, vector<vector<int>>& courses,bool & hasCycle, vector<bool>& visited, vector<bool>& onStack){
       
        visited[i] = true;
        onStack[i] = true;
        
        for(int w : courses[i]){
            if(hasCycle) return;
            else if(!visited[w])
                dfs(w, courses, hasCycle, visited, onStack);
            else if(onStack[w]){
                hasCycle = true;
                return;
            }
        }
        
        onStack[i] = false;
        
    }
};

Method II
class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
     if(numCourses<=1) return true;
     unordered_map<int,vector<int>> map;
     vector<int> v(numCourses,0);
     
     for(auto p:prerequisites){
         map[p.second].push_back(p.first);
         v[p.first]++;
     }
     
     queue<int> q;
     int visited = 0;
     for(int i = 0;i<v.size();++i) 
       if(v[i]==0){
         q.push(i);
         visited++;
       } 
     while(!q.empty()){
         int s= q.size();
         for(int i = 0;i<s;++i){
             int temp = q.front();
             q.pop();
             for(auto x:map[temp]){
                 v[x]--;
                 if(v[x]==0){
                     q.push(x);
                     visited++;
                 }
             }
         }
     }
     return visited == numCourses;
    }
    
};
