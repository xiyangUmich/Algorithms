Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits 0-9, ?, :, T and F (T and F represent True and False respectively).

Note:

The length of the given string is â‰¤ 10000.
Each number will contain only one digit.
The conditional expressions group right-to-left (as usual in most languages).
The condition will always be either T or F. That is, the condition will never be a digit.
The result of the expression will always evaluate to either a digit 0-9, T or F.

public class Solution {
    public string ParseTernary(string expression) {
       return helper(expression, 0);
    }
    public string helper(string expression, int begin){
        if(begin==expression.Length-1 || expression[begin+1]==':') return expression[begin].ToString();
       
        if(expression[begin]=='T') return helper(expression,begin+2);
        int i = begin+1;   
        int total = 0;
        while(i<expression.Length){
            if(expression[i]=='?'){
                total++;
                i = i+2;
            }
            else{
                total--;
                if(total==0) return helper(expression, i+1);
                i = i+2;
            }
        }
        return expression[begin].ToString();
    }
}
