/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(Node* root) {
        string res;
        helper(root, res);
        return res;
    }
    void helper(Node* curr, string& res) {
        if(curr) res += (to_string(curr->val) + ',');
        else return;       
        if(curr->children.size() != 0) {
            res.push_back('[');           
            for(Node* child: curr->children) helper(child, res);  
            res.push_back(']');          
        }
    }

    // Decodes your encoded data to tree.
    Node* deserialize(string data) {
        int n = static_cast<int>(data.size());
        Node* head = new Node(-1);
        if(n == 0) return NULL;
        int start = 0;
        helper(data, n, start, head);
        return head->children[0];
    }
    void helper(string& data, int n, int& start, Node* curr) {
        while(start < n) {
            if(data[start] == ']') {
                start++;
                return;
            }
            int end = start+1;
            while(end < n && data[end] != ',') end++;
            int val = atoi(data.substr(start, end - start).c_str());
            Node* temp = new Node(val);
            if(data[++end] == '[') {
                ++end;
                helper(data, n, end, temp);
            }
            curr->children.push_back(temp);
            //delete temp;
            start = end;
        }
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
