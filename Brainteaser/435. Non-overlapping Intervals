Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note:

You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    int eraseOverlapIntervals(vector<Interval>& intervals) {
        if(intervals.size() == 0 || intervals.size() == 1) return 0;
        sort(intervals.begin(), intervals.end(), cmp);
        int res = 0;
        int index1 = 0, index2 = 1;
        while(index2 < intervals.size()) {
            auto i2 = intervals[index2];
            auto i1 = intervals[index1];
          if(i2.start >= i1.end) {
              index1 = index2;
              index2 = index2+1;
          }
            else if(i2.end <= i1.end) {
                res++;
                index1 = index2;
                index2 = index2+1;
            }
            else {
                res++;
                index2 = index2+1;
            }
        }
        return res;
        //return overlapCheck(intervals, 0, 1, 0);
    }
    static bool cmp(Interval i1, Interval i2) {
        return ((i1.start < i2.start) ||
            (i1.start == i2.start && i1.end < i2.end));
       // return true;
    }
};
