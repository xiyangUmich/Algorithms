Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

•Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
•The solution set must not contain duplicate triplets.

    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> path;
        int start=0;
        int sum=0;
        sort(nums.begin(),nums.end());
        helper(res,path,start,sum,nums);
        return res;
    }
    void helper(vector<vector<int>>& res, vector<int>& path, int start, int sum, vector<int>& nums){
         
        for(int i=start;i<nums.size();++i){
            while(i!=start && nums[i]==nums[i-1] &&i<nums.size()) ++i;
            if(i==nums.size()) break;
            path.push_back(nums[i]);
            sum+=nums[i];
            if(path.size()==3 && sum==0){
               res.push_back(path);
            }
            if(path.size()<3)
            helper(res,path,i+1,sum,nums);
            sum-=nums[i];
            path.pop_back();
        }
    }
};
