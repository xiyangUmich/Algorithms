You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.

class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        int m=rooms.size();
        if(m==0) return;
        int n=rooms[0].size();
        int d=1;
        bool hasValue=true;
        while(hasValue){
            hasValue=false;
            for(int i=0;i<m;++i)
                for(int j=0;j<n;++j)
                    if(rooms[i][j]==d-1){
                        hasValue=true;
                        if(i>0 && rooms[i-1][j]!=-1 && rooms[i-1][j]>d) rooms[i-1][j]=d;
                        if(i<m-1 && rooms[i+1][j]!=-1 && rooms[i+1][j]>d) rooms[i+1][j]=d;
                        if(j>0 && rooms[i][j-1]!=-1 && rooms[i][j-1]>d) rooms[i][j-1]=d;
                        if(j<n-1 && rooms[i][j+1]!=-1 && rooms[i][j+1]>d) rooms[i][j+1]=d;
                    }
             ++d;   
        }
        
    }
};
