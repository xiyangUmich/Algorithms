Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

B.length >= 3
There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]

class Solution {
public:
    int longestMountain(vector<int>& A) {
       if(A.size() == 0) return 0;
        int n = A.size();
        int res = 0;
        
        int i = 0;
        while(i < n) {
            while(i+1 < n && A[i+1] <= A[i]) i++;
            if(i+1 == n) break;
            if(A[i+1] == A[i]) continue;
            int begin = i;
            while(i+1 < n && A[i+1] > A[i]) i++;
            if(i+1 == n) break;
            if(A[i+1] == A[i]) continue;
            //int peak = A[i];
            while(i+1 < n && A[i+1] < A[i]) i++;
            res = max(res, i-begin+1);
        }
        return res;
