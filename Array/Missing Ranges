Given a sorted integer array where the range of elements are [lower, upper] inclusive, return its missing ranges.

For example, given [0, 1, 3, 50, 75], lower = 0 and upper = 99, return ["2", "4->49", "51->74", "76->99"]. 

class Solution {
public:
    vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) {
        vector<string> res;
        if(lower > upper) return res;
       
       int i=0;
       while(i<nums.size() && nums[i]<lower) ++i;
       while(i<nums.size() && nums[i]<upper){
          int diff = nums[i] - lower;
          if(diff==1) res.push_back(to_string(lower));
          else if(diff>1) res.push_back(to_string(lower)+"->"+to_string(nums[i]-1));
          lower = nums[i]+1;
          ++i;
       }
       if(i<nums.size() && nums[i]==upper) --upper;
       int diff = upper-lower;
       if(diff==0) res.push_back(to_string(lower));
       else if(diff>0) res.push_back(to_string(lower)+"->"+to_string(upper));
       
        return res;
    }
};
