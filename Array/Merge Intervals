Given a collection of intervals, merge all overlapping intervals.

For example,
 Given [1,3],[2,6],[8,10],[15,18],
 return [1,6],[8,10],[15,18].

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        
        if(intervals.size()<=1) return intervals;
        vector<int> starts;
        vector<int> ends;
        vector<Interval> res;
        starts.push_back(intervals[0].start);
        ends.push_back(intervals[0].end);
        
        for(int i=1;i<intervals.size();++i){
            if(intervals[i].start!=intervals[i-1].start || intervals[i].end!=intervals[i-1].end){  //Consider the two same intervals
            starts.push_back(intervals[i].start);
            ends.push_back(intervals[i].end);
            }
        }
        sort(starts.begin(),starts.end());
        sort(ends.begin(),ends.end());
        for(int j=0;j<starts.size();++j){
            Interval interval;
            interval.start=starts[j];
            while(j<starts.size()-1 && starts[j+1]<=ends[j]) ++j;
            interval.end=ends[j];
            res.push_back(interval);
        }
        return res;
    }
};
