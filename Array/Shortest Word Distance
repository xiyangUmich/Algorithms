Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.
Methods1:
class Solution {
public:
    int shortestDistance(vector<string>& words, string word1, string word2) {
      vector<int> index1;
      vector<int> index2;
      int i=0;
      int size=words.size();
      if(size==0 || size==1) return 0;
      while(i<size){
          if(word1.compare(words[i])==0) index1.push_back(i);
          else if(word2.compare(words[i])==0) index2.push_back(i);
          ++i;
      }
      int dis=INT_MAX;
      for(int p=0;p<index1.size();p++)
        for(int q=0;q<index2.size();q++)
            if(abs(index1[p]-index2[q])<dis)
                dis=abs(index1[p]-index2[q]);
      return dis;  
    }
    
};

Methods2:
class Solution {
public:
    int shortestDistance(vector<string>& words, string word1, string word2) {
        int pos1=-1, pos2=-1;
        int size=words.size();
        int dis=size;
        for(vector<string>::iterator it=words.begin();it!=words.end();++it){
            if(word1.compare(*it)==0) pos1=it-words.begin();
            else if(word2.compare(*it)==0) pos2=it-words.begin();     
            else continue;
            if(pos1>=0 && pos2>=0 && abs(pos1-pos2)<dis) dis=abs(pos1-pos2);  //Just need to consider pos1[i] and pos1[i-1] when finding a pos2[i]
        }
        return dis;
    }
};
