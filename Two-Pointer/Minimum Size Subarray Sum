Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead. 

For example, given the array [2,3,1,2,4,3] and s = 7,
 the subarray [4,3] has the minimal length under the problem constraint. 

class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        if(nums.size()==0) return 0;
        int length=INT_MAX;
        int begin=0, end=1;
        int sum=nums[begin];
        bool hasFound=false;
        
        while(end<nums.size()){
            if(length==1) return length;
            
            while(sum<s && end<nums.size()){
                sum+=nums[end++];
            }
            if(sum>=s){
                hasFound=true;
                if(end-begin<length) length=end-begin;
            }
            while(sum>=s){
                if(end-begin<length) length=end-begin;
                sum-=nums[begin];
                ++begin;
            }
        }
        return hasFound? length:0;
    }
};
