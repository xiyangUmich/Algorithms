You have an initial power P, an initial score of 0 points, and a bag of tokens.

Each token can be used at most once, has a value token[i], and has potentially two ways to use it.

If we have at least token[i] power, we may play the token face up, losing token[i] power, and gaining 1 point.
If we have at least 1 point, we may play the token face down, gaining token[i] power, and losing 1 point.

class Solution {
public:
    int bagOfTokensScore(vector<int>& tokens, int P) {
        if(tokens.size() == 0) return 0;
        sort(tokens.begin(), tokens.end());
        int score = 0, pw = P;
        //int res = 0;
        //int res = helper(tokens, 0, P, 0);
        int i = 0, j = tokens.size()-1;
        
        while(i < j) {
            if(tokens[i] <= pw) {
                score++;
                //res = max(res, score);
                pw -= tokens[i];
                i++;
            }
            else if(score < 1) return score;
            else {
                pw += tokens[j];
                score--;
                j--;
            }
        }
        return pw >= tokens[i]? score+1:score;
        
    }
