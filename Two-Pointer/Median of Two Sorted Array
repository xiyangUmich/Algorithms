class Solution {
  public:    /**     * @param A: An integer array.     * @param B: An integer array.     * @return: a double whose format is *.5 or *.0     */    
    double findMedianSortedArrays(vector<int> A, vector<int> B) {        
      // write your code here        
      int m = A.size();        
      int n = B.size();        
      if((m+n)%2) return helper(A,0,B,0,(m+n)/2+1);        
      else return (helper(A,0,B,0,(m+n)/2)+helper(A,0,B,0,(m+n)/2+1))/2;        
     }    
     double helper(vector<int> &A, int A_start, vector<int> &B, int B_start, int k){        
      if(A_start>=A.size()) return B[B_start+k-1];        
      if(B_start>=B.size()) return A[A_start+k-1];        
      if(k==1) return min(A[A_start],B[B_start]);        
      int A_key = A_start+k/2-1<A.size()?A[A_start+k/2-1]:INT_MAX;        
      int B_key = B_start+k/2-1<B.size()?B[B_start+k/2-1]:INT_MAX;        
      if(A_key<B_key)            return helper(A,A_start+k/2,B,B_start,k- k /2);        
      else             return helper(A,A_start, B, B_start+k/2,k-k/2);                
   }
};
