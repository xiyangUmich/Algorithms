Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

•Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
•The solution set must not contain duplicate quadruplets.

    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
      sort(nums.begin(), nums.end());
      vector<vector<int>> res;
      vector<int> path;
      if(nums.size()<4) return res;
      int first=0, second=1, third=2, fourth=nums.size()-1;
      int sum;
      
      for(;first<nums.size()-3;++first){
        for(second = first+1; second<nums.size()-2;++second){
            third = second+1;
            fourth = nums.size()-1;
            while(third<fourth){
                sum = nums[first]+nums[second]+nums[third]+nums[fourth];
                if(sum==target){
                    path.push_back(nums[first]);
                    path.push_back(nums[second]);
                    path.push_back(nums[third]);
                    path.push_back(nums[fourth]);
                    if(find(res.begin(), res.end(), path)==res.end())
                    res.push_back(path);
                    path.clear();
                    ++third;
                    --fourth;
                }
                else if(sum<target) ++third;
                else --fourth;
            }
        }
      }
      return res;
    }
};
