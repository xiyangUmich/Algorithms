Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
class Solution {

public:
    int threeSumClosest(vector<int>& nums, int target) {
     sort(nums.begin(), nums.end());
     int closest;
     int diff = INT_MAX;
     int diff2 = INT_MAX;
     int closest2;
     int sum;
     int first=0, second=1, third=nums.size();
     //if(target.size()==0) 
  
     for(;first<nums.size()-2;++first){
         diff2 = INT_MAX;
         second = first+1;
         third = nums.size()-1;
         while(second<third){
          sum = nums[first]+nums[second]+nums[third];
          if(sum == target) return target;
          if(abs(sum-target)<diff2){
             closest2 = sum;
             diff2 = abs(sum - target);
          } 
          if(sum < target) ++second;
          else --third;
         }
         if(abs(closest2 - target)<diff){
             closest = closest2;
             diff = abs(closest2 - target);
         }
     }
    return closest;
    }
};
