There are N gas stations along a circular route, where the amount of gas at station i is gas[i]. 

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations. 

Return the starting gas station's index if you can travel around the circuit once, otherwise return -1. 

Note:
 The solution is guaranteed to be unique. 

class Solution {
public:
   int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int len = gas.size();
        vector<int> diff;
        for (int i = 0; i < gas.size(); i++) {
            diff.push_back(gas[i]-cost[i]);
        }
        int begin =0;
        while(begin<len){
            if(diff[begin]>=0){
                int sum = diff[begin];
                int count = 0;
                while(sum>=0 && count<len){
                    ++count;
                    sum+=diff[(begin+count)%len];
                }
                if(sum<0) begin = begin+count+1;
                else return begin;
            }
            else ++begin;
        }
        return -1;
    }
};

Method II
class Solution {
public:
   int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
       int n = gas.size();
       if(n == 0) return -1;
       if(n == 1) return gas[0]>=cost[0]?0:-1;
       
       int s = 0;
       int e = 0;
       int curr = 0;
       
       while(1){
           if(s == e){
               while(gas[s]<cost[s]){
               if(s == n-1) return -1;
               ++s;
               }
               e = (s+1)%n;
              curr = gas[s]-cost[s] + gas[e]-cost[e];
           }
           if(curr >= 0){
               int dis = e>s?(e-s):(e+n-s);
               if(dis == n-1) return s;
               e = (e+1)%n;
               curr += gas[e] - cost[e];
           }
           else{
               if(s == n-1) return -1;
               curr -= (gas[s]-cost[s]);
               s++;
           }
       }
    }
