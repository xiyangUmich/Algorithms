Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        vector<int> res;
        int n = nums.size();
        if(n == 0) return res;
        
        for(int i = 0; i < n; ++i) nums.push_back(nums[i]);
        
        vector<vector<int>> temp (2*n, vector<int>(2, -1));
        
        for(int i = 2*n-2; i >= 0; --i) {
            if(nums[i] < nums[i+1]) {
                temp[i][0] = nums[i+1];
                temp[i][1] = i+1;
            }
           else {
                int j = i+1;
                while(j < 2*n) {
                    if(temp[j][1] == -1) break;
                    if(temp[j][0] > nums[i]) {
                        temp[i][0] = temp[j][0]; 
                        temp[i][1] = temp[j][1]; 
                        break;
                    }
                    j = temp[j][1];  
                }
             } 
        }
           
         for(int i = 0; i < n; ++i) res.push_back(temp[i][0]);
            
        return res;
        }
   
};
