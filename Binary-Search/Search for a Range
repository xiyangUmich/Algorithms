Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
 Given [5, 7, 7, 8, 8, 10] and target value 8,
 return [3, 4]. 

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int mid=-1;
        int start=0, end=nums.size()-1;
        
        while(start<=end){
            mid=(start+end)/2;
            if(nums[mid]==target) break;
  
            if(nums[mid]<target) start=mid+1;
            if(nums[mid]>target) end=mid-1;
        }
        
        if(mid!=-1 && start<=end){
        start=mid;
        end=mid;
        
        while(start>=1 && nums[start-1]==target) --start;
        while(end<=nums.size()-2 && nums[end+1]==target) ++end;
        }
        
        return (mid!=-1 && start<=end)? vector<int> {start,end}: vector<int> (2,-1);
        
    }
};
