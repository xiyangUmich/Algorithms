Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.

class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums[0]<=nums[nums.size()-1]) return nums[0];
        int begin=0, end = nums.size()-1;
        while(begin<=end){
        if(begin==end) return nums[begin];
        if(end-begin==1) return min(nums[begin], nums[end]);
        int mid = (begin+end)/2;
            if(nums[mid]>nums[mid-1] && nums[mid]<nums[mid+1])
                if(nums[mid]>nums[begin]) begin=mid+1;
                else end=mid-1;
            else if(nums[mid]<=nums[mid-1]) return nums[mid];
            else if(nums[mid]>=nums[mid+1]) return nums[mid+1];
        }
    }
    
};
//From the minimunm number index, nums will grow bigger and bigger gradually to the right diraction.
