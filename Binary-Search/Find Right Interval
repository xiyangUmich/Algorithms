Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the "right" of i.

For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.

C++:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<int> findRightInterval(vector<Interval>& intervals) {
        map<int, int> map;
        for(int i=0;i<intervals.size();++i) map[intervals[i].start] = i;
        vector<int> res;
        for(auto in : intervals){
            auto iter = map.lower_bound(in.end);    //The first ele <= the para, return the iterator
            res.push_back(iter!=map.end()?iter->second:-1);
        }
        return res;
    }
};
