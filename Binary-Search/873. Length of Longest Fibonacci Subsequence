A sequence X_1, X_2, ..., X_n is fibonacci-like if:

n >= 3
X_i + X_{i+1} = X_{i+2} for all i + 2 <= n
Given a strictly increasing array A of positive integers forming a sequence, find the length of the longest fibonacci-like subsequence of A.  If one does not exist, return 0.

(Recall that a subsequence is derived from another sequence A by deleting any number of elements (including none) from A, without changing the order of the remaining elements.  For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].)

class Solution {
private:
    int maxLength = 0;
public:
    int lenLongestFibSubseq(vector<int>& A) {
        if(A.size() == 0) return 0;
        int n = A.size();
        for(int i = 0; i < A.size()-1; i++) {
            for(int j = i+1; j < A.size(); j++) {
                helper(i, j, 2, j+1, A);
            }
        }
        return maxLength > 2?maxLength:0;
    }
    void helper(int i, int j, int currLength, int currIndex, vector<int>& A) {
        int nextIndex = findNum(A[i]+A[j], A, currIndex, A.size()-1);
        if(nextIndex == -1) {
            maxLength = max(maxLength, currLength);
            return;
        }
        helper(j, nextIndex, currLength+1, nextIndex+1, A);
    }
    int findNum(int target, vector<int>& A, int start, int end) {
        while(start <= end) {
            int mid = start + (end - start)/2;
            if(A[mid] == target) return mid;
            if(A[mid] < target) start = mid + 1;
            else end = mid-1;
        }
        return -1;
    }

};
