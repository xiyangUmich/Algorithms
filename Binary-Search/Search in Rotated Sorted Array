Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

class Solution {
public:
    int search(vector<int>& nums, int target) {
       int i=0;
       int boundary=nums.size()-1;
       while(i<=nums.size()-2){
           if(nums[i+1]>nums[i]) ++i;
           else{
               boundary=i+1;
               break;
           }
       }
       int res1=search(nums, 0,boundary-1, target);
       int res2=search(nums, boundary, nums.size()-1, target);
       if(res1==-1 && res2==-1) return -1;
       else return res1==-1?res2:res1;
    }
    int search(vector<int>& nums, int begin, int end, int target){
        while(begin<=end){
        if(begin==end){
            if(nums[begin]==target) return begin;
            else return -1;
        }
        int mid=(begin+end)/2;
        if(nums[mid]<target) begin=mid+1;
        else if(nums[mid]>target) end=mid-1;
        else return mid;
        }
        return -1;
    }
    
}
