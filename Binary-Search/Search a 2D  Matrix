Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int i=-1;
        
        int bottom=0, up=m-1;
        while(bottom<=up){
            int mid = (bottom+up)/2;
            if(target<=matrix[mid][n-1] && target>=matrix[mid][0]) {i=mid; break;}
            else if(target>matrix[mid][n-1]) bottom = mid+1;
            else up = mid-1;
        }
        if(i==-1) return false;
        int left=0, right=n-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(matrix[i][mid]<target) left=mid+1;
            if(matrix[i][mid]>target) right=mid-1;
            if(matrix[i][mid]==target) return true;
        }
        if(left>right) return false;
        
    }
};

Method II:
//Convert multi-dim matrix to a vector
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int l=0, r=m*n-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(matrix[mid/n][mid%n]==target) return true;
            if(matrix[mid/n][mid%n]<target) l=mid+1;
            else r=mid-1;
        }
        return false;
        
    }
};
