Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

Example:

Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3

class NumArray {
    private:
    vector<int> sums;
public:
    NumArray(vector<int> &nums) {
        if(nums.size()!=0){
            sums.assign(nums.size(),0);    //vectors cannot be initialized without specifying size
       sums[0]=nums[0];
       for(int i=1;i<nums.size();++i){
           sums[i]=sums[i-1]+nums[i];
       }
        }
    }

    int sumRange(int i, int j) {
        if(i<0 || i>=sums.size() || j<0 || j>=sums.size() || j<i) return 0;
        return i>0?sums[j]-sums[i-1]:sums[j];
    }
    
};


// Your NumArray object will be instantiated and called as such:
// NumArray numArray(nums);
// numArray.sumRange(0, 1);
// numArray.sumRange(1, 2);
