class RandomizedCollection {
    private:
        unordered_map<int,vector<int>> map;
        vector<pair<int,int>> nums;
public:
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        bool res = map.find(val)==map.end();
        map[val].push_back(nums.size());
        nums.push_back(make_pair(val,map[val].size()-1));
        return res;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        bool res = map.find(val)!=map.end();
        if(res){
            int i1 = map[val][map[val].size()-1];
            map[val].pop_back();
            int last = nums[nums.size()-1].first;
            int i2 = nums[nums.size()-1].second;
            nums.pop_back();
            if(map[val].size()==0) map.erase(val);
            if(last!=val){
            nums[i1].first = last;
            map[last][i2] = i1;
            }
        }
        return res;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return nums[rand()%nums.size()].first;
    }
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection obj = new RandomizedCollection();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
