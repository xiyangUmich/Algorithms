insert(val): Inserts an item val to the set if not already present.
2.remove(val): Removes an item val from the set if present.
3.getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned

class RandomizedSet {
private: 
unordered_map<int,int> map;
vector<int> v;
int s;

public:
    /** Initialize your data structure here. */
    RandomizedSet() {
       s = 0; 
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
       if(map.find(val)==map.end()){
        map[val] = s++;
        v.push_back(val);
        return true;
       }
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
       if(map.find(val)==map.end()) return false;
        map[v.back()] = map[val];
        swap(v[map[val]], v.back());
        map.erase(val);        //erase a ele in map by key
        v.pop_back();
        --s;
       return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return v[rand()%s];      //create a random number
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
