Given two 1d vectors, implement an iterator to return their elements alternately. 

For example, given two 1d vectors: 
v1 = [1, 2]
v2 = [3, 4, 5, 6]

class ZigzagIterator {
    private:
    vector<int> v1,v2;
    int size1,size2;
    int curr=0, curr1=0,curr2=0;
public:
    ZigzagIterator(vector<int>& v1, vector<int>& v2) {
        this->v1=v1;
        this->v2=v2;
        this->size1=v1.size();
        this->size2=v2.size();
    }

    int next() {
        int res;
       if(curr1>=size1 && curr2<size2) res=v2[curr2++];
       else if(curr1<size1 && curr2>=size2) res=v1[curr1++];
      
       else if(curr%2==0 && curr1<size1) res=v1[curr1++];
       else if(curr%2!=0 && curr2<size2) res=v2[curr2++];
       ++curr;
       return res;
     }

    bool hasNext() {
        return curr<(size1+size2)? true:false; 
    }
};

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i(v1, v2);
 * while (i.hasNext()) cout << i.next();
 */
