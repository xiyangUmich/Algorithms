Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    void serHelper(TreeNode* root, ostringstream& out){
        if(root==NULL) out<<"# ";
        else {
         out<<root->val<<' ';
         serHelper(root->left, out);
         serHelper(root->right,out);
        }
    }
    TreeNode* deserHelper(istringstream &in){
        string val;
        in>>val;
        if(val=="#") return NULL;
        TreeNode* root = new TreeNode(stoi(val));
        root->left = deserHelper(in);
        root->right = deserHelper(in);
        return root;
    
    }
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
       ostringstream out;
       serHelper(root, out);
       return out.str();
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        istringstream in(data);
        return deserHelper(in);
    }
    
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
