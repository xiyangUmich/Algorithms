/*
A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill's lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID), the transactions can be represented as [[0, 1, 10], [2, 0, 5]].

Given a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.

Note:

A transaction will be given as a tuple (x, y, z). Note that x ≠ y and z > 0.
Person's IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/optimal-account-balancing
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

class Solution {
private:
    int count;
public:
    int minTransfers(vector<vector<int>>& transactions) {
        if(transactions.size() == 0) return 0;
        int n = transactions.size();
        count = INT_MAX;
        int maxNum = 0;

        for(auto t: transactions) {
            maxNum = max(maxNum, max(t[0], t[1]));
        }
        vector<int> trans(maxNum+1, 0);
        for(auto t: transactions) {
            trans[t[0]] -= t[2];
            trans[t[1]] += t[2];
        }
        helper(trans, 0, 0);
        return count;
    }
    void helper(vector<int>& trans, int ind, int c){
        while(ind < trans.size() && trans[ind] == 0) ind++;
        if(ind == trans.size()){
            count = min(count, c);
            return;
        }
        for(int i = ind+1, prev = 0; i< trans.size(); ++i) {
            if(trans[i] != prev && trans[i]*trans[ind] < 0) {
                trans[i] += trans[ind];
                if(abs(trans[ind]-trans[i]) <= 0) helper(trans, ind+1, c+1);
                trans[i] -= trans[ind];
                prev = trans[i];
            }
        }

    }
};
