Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    bool canAttendMeetings(vector<Interval>& intervals) {
        if(intervals.size()==0 || intervals.size()==1) return true;
        for(int i=0; i<intervals.size()-1;++i)
            for(int j=i+1;j<intervals.size();++j)
            if(isInterval(intervals[i], intervals[j])) return false;
        return true;
        }
        bool isInterval(Interval& i1, Interval& i2){
            if((i2.start>i1.start && i2.start<i1.end) ||     //cannot use ->, since it is not a pointer
            (i2.end>i1.start && i2.end<i1.end) ||
            (i2.start<=i1.start && i2.end>=i1.end)) return true;
            else return false;
        }
    
};

Method II
class Solution {
public:
    bool canAttendMeetings(vector<Interval>& intervals) {
        if(intervals.size()<=1) return true;
      sort(intervals.begin(), intervals.end(),compare);
      int endTime = intervals[0].end;
      for(int i=1;i<intervals.size();++i){
          if(intervals[i].start<endTime) return false;
          endTime = max(endTime, intervals[i].end);
      }
      return true;
    }
    static bool compare(Interval v1, Interval v2){
        return v1.start<v2.start;
    }
};
