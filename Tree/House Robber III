The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night. 

Determine the maximum amount of money the thief can rob tonight without alerting the police. 

Example 1:

     3
    / \
   2   3
    \   \ 
     3   1

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    unordered_map<TreeNode*, pair<int,int>> map;
public:
    int rob(TreeNode* root) {
        if(!root) return 0;
        if(!root->left && !root->right)
            map[root] = make_pair(root->val, 0);
        else if(!root->right){
           rob(root->left);
           map[root] = make_pair(root->val+map[root->left].second, 
                                 max(map[root->left].first, map[root->left].second));   
        }
            
        else if(!root->left){
            rob(root->right);
            map[root] = make_pair(root->val+map[root->right].second, 
                                  max(map[root->right].first, map[root->right].second));
        }
        else{
            rob(root->left);
            rob(root->right);
            map[root] = make_pair(root->val+map[root->left].second+map[root->right].second,
                                  max(map[root->left].first, map[root->left].second) 
                                + max(map[root->right].first, map[root->right].second));
        }    
       return max(map[root].first, map[root].second);     
    }
};
