Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        int small= p->val<q->val?p->val:q->val;
        int big = p->val<q->val?q->val:p->val;
       if(root->val == small || root->val ==big || (root->val>small && root->val<big)) return root;
       if(root->val>small) return lowestCommonAncestor(root->left, p, q);
       if(root->val<big) return lowestCommonAncestor(root->right, p, q);
    }
    
};

//Travesrse from root, the first node between p and q is the lowest common ancestor
