Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum. 
For example:
 Given the below binary tree and sum = 22,               5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1


return

[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        vector<int> path;
        if(root==NULL && sum>=0) return res;
        else helper(res,path,root,sum);
        return res;
    }
    void helper(vector<vector<int>>& res, vector<int>& path, TreeNode* root, int sum){
        if(root!=NULL && root->left==NULL && root->right==NULL){
            if(root->val==sum){
            path.push_back(root->val);
            res.push_back(path);
            path.pop_back();
            }
        }
        else if(root==NULL) return;
        else {
            path.push_back(root->val);
            helper(res, path, root->left, sum-root->val);
            helper(res, path, root->right, sum-root->val);
            path.pop_back();
        }
    }
};
