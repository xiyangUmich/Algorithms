Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum. 
For example:
 Given the below binary tree and sum = 22,               5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1


return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if(root==NULL) return false;
        return hasPathSumHelp(root, sum);
    }
    bool hasPathSumHelp(TreeNode* root, int sumLeft){
        if(root->left == NULL && root->right == NULL && root->val==sumLeft) return true;
        if(root->left == NULL && root->right == NULL) return false;
        if(root->left == NULL && root->right != NULL) return hasPathSumHelp(root->right, sumLeft-root->val);
        if(root->right == NULL && root->left != NULL) return hasPathSumHelp(root->left, sumLeft-root->val);
        return (hasPathSumHelp(root->left, sumLeft-(root->val)) || hasPathSumHelp(root->right, sumLeft-(root->val)));
    }
   
};
