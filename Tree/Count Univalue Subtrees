Given a binary tree, count the number of uni-value subtrees.

A Uni-value subtree means all nodes of the subtree have the same value.

class Solution {
public:
    int countUnivalSubtrees(TreeNode* root) {
      int count=0;
      return countTree(root,count);
        
    }
    bool isUnivalSubTree(TreeNode* root){
        if(root==NULL) return false;
        if(root->left==NULL && root->right==NULL)  return true;
        if(root->right==NULL){
            if(root->val!=root->left->val) return false;
            else return isUnivalSubTree(root->left);
        }
        if(root->left==NULL){
            if(root->val!=root->right->val) return false;
            else return isUnivalSubTree(root->right);
        }
        if(root->val!=root->left->val || root->val!=root->right->val) return false;
        else return (isUnivalSubTree(root->left) && isUnivalSubTree(root->right));
    }
    int countTree(TreeNode* root, int count){
        if(isUnivalSubTree(root)) ++count;
        if(root==NULL||(root->left==NULL && root->right==NULL )) return count;
        if(root->left==NULL) return countTree(root->right,count);
        if(root->right==NULL) return countTree(root->left,count);
        else return countTree(root->right,count)+countTree(root->left,count)-count;
    }
};
