Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Method1. Time Error
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res;
        if(root==NULL) return res;
        queue<TreeNode*> q;
        q.push(root);
        res.push_back('0'+root->val);
        res+=",";
        while(!q.empty()){
            TreeNode* temp = q.front();
            q.pop();
            if(temp->left==NULL) res=res+"null,";
            else {
                q.push(temp->left);
                res.push_back('0'+temp->left->val);
                res.push_back(',');
            }
            if(temp->right==NULL) res=res+"null,";
            else {
                q.push(temp->right);
                res.push_back('0'+temp->right->val);
                res.push_back(',');
            }
        }
        int i =res.size()-1;
        while(i>=0 && !isdigit(res[i--]))
        res.pop_back();
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0) return NULL;
        TreeNode* head = new TreeNode(data[0]-'0');
        queue<TreeNode*> q;
        q.push(head);
        int i=2;
        while(i<data.size()){
            TreeNode *temp = q.front();
            q.pop();
            if(data[i]=='n') i=i+5;
            else{
                TreeNode* left = new TreeNode(data[i]-'0');
                temp->left = left;
                q.push(left);
                i=i+2;
            }
            if(data[i]=='n') i=i+5;
            else{
                TreeNode* right = new TreeNode(data[i]-'0');
                temp->right=right;
                q.push(right);
                i=i+2;
            }
            
        }
        return head;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));

