Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int largestBSTSubtree(TreeNode* root) {
        if(!root) return 0;
        if(isBST(root, NULL, NULL)) return countNodes(root);
        else return max(largestBSTSubtree(root->left), largestBSTSubtree(root->right));
    }
    bool isBST(TreeNode* root, TreeNode* small, TreeNode* big){
        if(!root) return true;
        if((small && root->val <small->val) || (big && root->val>big->val)) return false;
        return isBST(root->left, small, root) && isBST(root->right, root, big);
    }
    int countNodes(TreeNode* root){
        if(!root) return 0;
        return 1+countNodes(root->left) + countNodes(root->right);
    }
};
