For example, 
    1
   / \
  2   3



The root-to-leaf path 1->2 represents the number 12.
 The root-to-leaf path 1->3 represents the number 13. 

Return the sum = 12 + 13 = 25. 

class Solution {
public:
    int sumNumbers(TreeNode* root) {
        if(root==NULL) return 0;
        int currNum=root->val;
        int currSum=root->val;
        return sumNumbersHelp(root,currNum,currSum);
        
    }
    int sumNumbersHelp(TreeNode* root, int currNum, int currSum){
        if(root->left==NULL && root->right==NULL) return currSum;
        if(root->right==NULL){
            int currLeft=currNum*10+root->left->val;
            int currLeftSum=currSum-currNum+currLeft;
            return sumNumbersHelp(root->left, currLeft, currLeftSum);
        }
        if(root->left==NULL){
            int currRight=currNum*10+root->right->val;
            int currRightSum=currSum-currNum+currRight;
            return sumNumbersHelp(root->right, currRight, currRightSum); 
        }
        else{
            int currLeft=currNum*10+root->left->val;
            int currLeftSum=currSum-currNum+currLeft;
            int currRight=currNum*10+root->right->val;
            int currRightSum=currSum-currNum+currRight;
            return sumNumbersHelp(root->left, currLeft, currLeftSum)+
                    +sumNumbersHelp(root->right, currRight, currRightSum);
        }
        
    }
};

Method II
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        if(root==NULL) return 0;
        int sum = 0;
        helper(root, sum, root->val);
        return sum;
    }
    void helper(TreeNode* root, int& sum, int temp){
       if(root->left) helper(root->left, sum, temp*10+root->left->val);
       if(root->right) helper(root->right, sum, temp*10+root->right->val);
       if(!root->left && !root->right) sum+=temp;
    }
};
