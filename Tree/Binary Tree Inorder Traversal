class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        inorderTraversalHelper(root,result);
        return result;
    }
    void inorderTraversalHelper(TreeNode* root, vector<int>& curr){
        if(root==NULL) return;
        inorderTraversalHelper(root->left, curr);
        curr.push_back(root->val);
        inorderTraversalHelper(root->right,curr);
    }
};

//Method 2: Stack
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
       stack<TreeNode*> s;
       vector<int> res;
       if(root==NULL) return res;
       s.push(root);
       while(!s.empty()){
           TreeNode* temp = s.top();
           TreeNode* pre = s.top();
          
           if(s.size()>=2){
               s.pop();
               pre=s.top();
               s.push(temp);
           }
           while(temp->left){
               pre=temp;
               temp=temp->left;
               s.push(temp);
           }
           res.push_back(temp->val);
           s.pop();
           if(pre->left==temp) pre->left=NULL;
           if(temp->right) s.push(temp->right);
         }
        return res;
    }
};
