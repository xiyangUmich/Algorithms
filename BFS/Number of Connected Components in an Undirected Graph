Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

class Solution {
public:
    int countComponents(int n, vector<pair<int, int>>& edges) {
        
        unordered_map<int,vector<int>> map;
        int res=0;
        queue<int> q;
        vector<bool> visited(n,false);
        
        for(auto e:edges) {
            map[e.first].push_back(e.second);
            map[e.second].push_back(e.first);
        }
        for(int i=0;i<n;++i){
            if(visited[i]) continue;
            q.push(i);
            ++res;
            while(!q.empty()){
              int temp = q.front();
              q.pop();
              visited[temp] = true;
              for(int j:map[temp])
                  if(!visited[j]) q.push(j);
              
            }
        }
        return res;
    }
};
