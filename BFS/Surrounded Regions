Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region. 

For example,

X X X X
X O O X
X X O X
X O X X



After running your function, the board should be: 
X X X X
X X X X
X X X X
X O X X

class Solution {
public:
    void solve(vector<vector<char>>& board) {
     int m = board.size();
     if(m<=2) return;
     int n = board[0].size();
     if(n<=2) return;
     vector<vector<bool>> visited(m,vector<bool>(n,false));
     bool isBoundary = false;
     
     for(int i=1;i<m-1;++i)
        for(int j=1;j<n-1;++j)
            if(board[i][j]=='O'&& visited[i][j]==false){
                isBoundary = false;
                queue<pair<int,int>> q;
                vector<pair<int,int>> v;
                q.push(make_pair(i,j));
                 auto temp = q.front();
                    v.push_back(temp);
                    visited[i][j]=true;
                while(!q.empty()){
                   temp = q.front();
                   int i1 = temp.first;
                   int j1 = temp.second;
                   q.pop();
                    if(board[i1-1][j1]=='O' && !visited[i1-1][j1]){
                        if(i1==1) 
                           isBoundary = true; 
                          else{
                           q.push(make_pair(i1-1,j1));
                           v.push_back(make_pair(i1-1,j1));
                           visited[i1-1][j1]=true;
                          }
                    }
                    if(board[i1][j1-1]=='O' && !visited[i1][j1-1]){
                        if(j1==1)
                           isBoundary = true;
                        else{
                           q.push(make_pair(i1,j1-1));
                           v.push_back(make_pair(i1,j1-1));
                           visited[i1][j1-1]=true;
                        }
                        
                    }
                    if(board[i1+1][j1]=='O'&& !visited[i1+1][j1]){
                        if(i1==m-2) 
                            isBoundary = true;
                        else{
                           q.push(make_pair(i1+1,j1));
                           v.push_back(make_pair(i1+1,j1));
                           visited[i1+1][j1]=true;
                        }
                    }
                    if(board[i1][j1+1]=='O'&& !visited[i1][j1+1]){
                        if(j1==n-2)
                           isBoundary = true;
                         else{
                           q.push(make_pair(i1,j1+1));
                           v.push_back(make_pair(i1,j1+1));
                           visited[i1][j1+1]=true;
                         }
                    }
                    
                }
                if(!isBoundary)
                    for(auto p : v) board[p.first][p.second]='X';
            }
           
    }
};
