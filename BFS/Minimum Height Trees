For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

class Solution {
public:
   
vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges){
        vector<int> res;
        if(n==1) return vector<int>(1,0);
        vector<int> v(n);
        vector<vector<int>> map(n,vector<int>());
        for(pair<int,int> p : edges){
            v[p.first]++;
            v[p.second]++;
            map[p.first].push_back(p.second);
            map[p.second].push_back(p.first);
        }
        queue<int> q;
        for(int i=0;i<n;++i) if(v[i]==1) q.push(i);
        int left=n;
        while(left>2){
            int size = q.size();
            for(int i=0;i<size;++i){
                int t = q.front();
                q.pop();
                left--;
                for(auto w:map[t]){
                    --v[w];
                    if(v[w]==1) q.push(w);
                }
            }
        }
        res.push_back(q.front());
        q.pop();
        if(!q.empty()) res.push_back(q.front());
        return res;
    }
};
