Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

class Solution {
public:
    int majorityElement(vector<int>& nums) {
       int last = nums.size()%2?nums[nums.size()-1]:0;
       queue<int> q;
       for(int i = 0;i<nums.size()-1;i = i+2){
          if(nums[i]==nums[i+1]) q.push(nums[i]); 
       }
      while(!q.empty() && q.size()>1){
        int s = q.size();
        for(int i = 0;i<=s-1;i = i+2){
            if(i==s-1){
                last = q.front();
                q.pop();
            }
            else{
            int n1 = q.front();
            q.pop();
            int n2 = q.front();
            q.pop();
            if(n1==n2) q.push(n1);
            }
        } 
      }
      return q.empty()? last:q.front();
    }
    
};
