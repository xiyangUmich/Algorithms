Find the kth largest element in an unsorted array.

Method I
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end(),compare);
        return nums[k-1];
    }
    static bool compare(int i, int j) {return (i>j);}   //Compare function should be a static one
};

Method II
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        vector<int> res = mergeSort(nums);
        return res[k-1];
    }
    vector<int> mergeSort(vector<int>& nums){
        if(nums.size()<=1) return nums;
        int mid = (nums.size()-1)/2;
        vector<int> v1(nums.begin(),nums.begin()+mid+1);   //Initialize a vector by iter, need to ending by one latter pointer location
        vector<int> v2(nums.begin()+mid+1,nums.end());
        return merge(mergeSort(v1), mergeSort(v2));
        
    }
    vector<int> merge(vector<int> v1, vector<int> v2){
        int i=0, j=0;
        vector<int> res;
        while(i<v1.size() || j<v2.size()){
            if(i>=v1.size()) res.push_back(v2[j++]);
            else if(j>=v2.size()) res.push_back(v1[i++]);
            else{
                if(v1[i]>v2[j]) res.push_back(v1[i++]);
                else res.push_back(v2[j++]);
            }
        }
        return res;
    }
};
