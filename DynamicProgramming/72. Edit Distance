Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.) You have the following 3 operations permitted on a word: a) Insert a character b) Delete a character c) Replace a character

class Solution {
  public:    
    int minDistance(string word1, string word2) {        
      int m = word1.size();        
      int n = word2.size();        
      if(m==0 && n==0) return 0;        
      if(m==0 || n==0) return m==0?n:m;        
      vector<vector<int>> dp(m+1,vector<int>(n+1,0));     //dp[i][j]: the minimum steps to match word1[0...i-1] to word2[0...j-1]   
      for(int i = 1;i<=m;++i) dp[i][0] = i;        
      for(int j = 1;j<=n;++j) dp[0][j] = j;        
      for(int i = 1;i<=m;++i)            
        for(int j = 1;j<=n;++j){                
          int n1 = (word1[i-1] == word2[j-1])?0:1;                
          dp[i][j] = min(dp[i-1][j-1]+n1,min(dp[i-1][j],dp[i][j-1])+1);            
          }        
      return dp[m][n];            
    }
 };
