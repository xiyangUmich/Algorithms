Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.size()==0) return 0;
        vector<int> sumRecord(nums.size(),nums[0]);
        int maxSum = nums[0];
        for(int i=1;i<nums.size();++i){
            sumRecord[i] = max(nums[i],sumRecord[i-1]+nums[i]);
            maxSum = max(sumRecord[i],maxSum);
        }
        return maxSum;
    }
};
