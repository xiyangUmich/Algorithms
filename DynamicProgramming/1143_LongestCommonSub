/*Given two strings text1 and text2, return the length of their longest common subsequence.(No need to be continuous). */

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();
        vector<vector<int>> res(n1, vector<int>(n2, 0));
        //int longest = 0;
        res[0][0] = text1[0] == text2[0]?1:0;
        for(int i = 0; i < n1; ++i){
            for(int j = 0; j < n2; ++j) {
                if(i != 0 || j != 0) {
                    if(text1[i] == text2[j]) {
                        res[i][j] = (i==0 || j ==0)? 1: res[i-1][j-1] + 1;
                       
                    }
                    else {
                        res[i][j] = i==0?res[i][j-1]: j==0? res[i-1][j]: max(res[i-1][j], res[i][j-1]);
                    }                    
                }                  
            }
      
        }
        return res[n1-1][n2-1];
        //return longest;
    }
};
