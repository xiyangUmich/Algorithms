Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size();
        int n = word2.size();
        if(m==0 && n==0) return 0;
        if(m==0 || n==0) return m==0?n:m;
        vector<vector<int>> match(m,vector<int>(n,INT_MAX));
        
        if(word1[0]!=word2[0]) match[0][0] = 1;
        else match[0][0] = 0;
        
        for(int i = 0;i<m;++i){
            for(int j = 0;j<n;++j){
                if(i==0 && j ==0) continue;
                if(i==0){
                    if(word1[i]==word2[j]) match[i][j] = j;
                    else match[i][j] = min(match[i][j],match[0][j-1]+1);
                }
                else if(j==0){
                    if(word1[i]==word2[j]) match[i][j] = i;
                    else match[i][j] = min(match[i][j], match[i-1][0]+1);
                }
               else{
                   if(word1[i] == word2[j]) match[i][j] = match[i-1][j-1];
                   match[i][j] = min(match[i][j],min(match[i-1][j],min(match[i][j-1],match[i-1][j-1]))+1);
               } 
            }
        }
        return match[m-1][n-1];
    }
};
