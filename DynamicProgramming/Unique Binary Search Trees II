Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
 Given n = 3, your program should return all 5 unique BST's shown below. 
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
      vector<TreeNode*> res;
      
      res=helper(1,n);
      return res;
      
    }
    vector<TreeNode*> helper(int start, int end){
        vector<TreeNode*> res;
        if(start>end){
            TreeNode* root=NULL;
            res.push_back(root);
            return res;
        }
       
        for(int i=start;i<=end;++i){
           vector<TreeNode*> left = helper(start,i-1);
           vector<TreeNode*> right = helper(i+1,end);
        
           for(auto l:left)
            for(auto r: right){
               TreeNode* root = new TreeNode(i);   //should be defined each time need a new root
               root->left=l;
                root->right=r;
                res.push_back(root);
            }
        }
        return res;
    }
};
