Given aclass Solution {public:    /**     * @param s a string     * @return an integer     */    int minCut(string s) {        // write your code here   string s, cut s into some substrings such that every substring is a palindrome. 
Return the minimum cuts needed for a palindrome partitioning of s.
class Solution {
  public:    /**     * @param s a string     * @return an integer     */    
  int minCut(string s) {        
    // write your code here        
    if(s.size()==0||s.size()==1) return 0;        
    vector<int> v(s.size(),-1);        
    v[0] = 0;        
    int n = s.size();                
    vector<vector<bool>> isPalindrome(n, vector<bool>(n,false));        
    for(int i = 0;i<n;++i) isPalindrome[i][i] = true;        
    for(int i = 0;i<n-1;++i){            
      isPalindrome[i][i+1] = s[i]==s[i+1]?true:false;        
    }        
    for(int d = 2;d<n;++d){            
      for(int i = 0;i+d<n;++i){                
        if(isPalindrome[i+1][i+d-1] && s[i]==s[i+d])                 
        isPalindrome[i][i+d] = true;            
       }        
     }        
     for(int i = 1;i<s.size();++i){            
      if(isPalindrome[0][i]) v[i] = 0;            
      else{                
        for(int j = i;j>=1;--j){                
        if(v[j-1]==-1) continue;                
        if(isPalindrome[j][i])                     
        v[i] = v[i]==-1?v[j-1]+1:min(v[i],v[j-1]+1);            
       }            
     }        
   }        
   return v[s.size()-1];    }   };
