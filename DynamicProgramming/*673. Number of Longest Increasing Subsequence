Given an unsorted array of integers, find the number of longest increasing subsequence.

MethodI:
public:
    int findNumberOfLIS(vector<int>& nums) {
       if(nums.size() == 0) return 0;
        int n = nums.size();
        int res = 0;
        int longest = 1;
        
        vector<int> length(n, 1);
        vector<int> count(n, 1);
        
        for(int i = 0; i < n; ++i) {
            //int tempL = 1;
            //int tempR = 0;
            for(int j = i+1; j < n; ++j)
                if(nums[j] > nums[i]) {
                    if(length[j] == length[i] + 1 && length[j] != 1) 
                        count[j] += count[i];
                    else if(length[j] < length[i] + 1) {
                        //index = j;
                        length[j] = length[i] + 1;
                        count[j] = count[i];
                    }
                                    }
             /*if(tempR != 0) {
                 res = tempR;
                 longest = tempL;
             }
             cout << i << ":" << longest << "," << res << endl;*/
        }
        for(int i = 0; i < n; ++i) {
            if(length[i] == longest) res += count[i];
            else if(length[i] > longest) {
                longest = length[i];
                res = count[i];
            }
        }
           
        return res;
}

MethodII:
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
       if(nums.size() == 0) return 0;
        int n = nums.size();
        //int longest = 1;
        vector<int> length(n, 1);
        vector<int> count(n, 1);
        
        for(int j = 1; j < n; ++j) {
            for(int i = j-1; i >= 0; --i) {
                if(nums[i] < nums[j]) {
                    if(length[i]+1 > length[j]) {
                        length[j] = length[i]+1;
                        count[j] = count[i];
                    }
                    else if(length[j] == length[i]+1) count[j] += count[i];          
                }
            }
        }
        int longest = *max_element(length.begin(), length.end());   //Can speed up the algorithm a lot
        int res = 0;
        for(int i = 0; i < n; ++i){
            if(length[i] == longest) res += count[i];
        }           
        return res;        
    }
};
