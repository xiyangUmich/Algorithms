There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color. 

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses. 



class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        vector<int> sum;
        vector<int> rowN;
        int size=costs.size();
        int result=0;
        if(costs.size()==0) return result;
            
            rowN.push_back(costs[0][0]);
            rowN.push_back(costs[0][1]);
            rowN.push_back(costs[0][2]);
            sum.push_back(rowN[0]);
            sum.push_back(rowN[1]);
            sum.push_back(rowN[2]);
            rowN.clear();
        
        int i=1;
        while(i<costs.size()){
          rowN.push_back(min(sum[1],sum[2])+costs[i][0]);
          rowN.push_back(min(sum[0],sum[2])+costs[i][1]);
          rowN.push_back(min(sum[0],sum[1])+costs[i][2]);
          sum.clear();
          sum.push_back(rowN[0]);
          sum.push_back(rowN[1]);
          sum.push_back(rowN[2]);
          rowN.clear();
          ++i;
        }
        
       result=min(sum[0],min(sum[1],sum[2]));
       return result;
        
    }
};
