Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

Solution I:
class Solution {
public:
    /**
     * @param s1 A string
     * @param s2 Another string
     * @return whether s2 is a scrambled string of s1
     */
    bool isScramble(string& s1, string& s2) {
        // Write your code here
        int n = s1.size();
        int n2 = s2.size();
        if(n==0 || n!=n2) return false;
        vector<vector<vector<string>>> dp(n,vector<vector<string>>(n,vector<string>()));
        for(int i = 0;i<n;++i){
            string temp;
            temp.push_back(s1[i]);
            dp[i][i].push_back(temp);
        }
            
        for(int d = 1;d<n;++d)
            for(int i=0;i+d<n;++i)
                for(int j = i;j<i+d;++j)
                    for(auto sl:dp[i][j])
                        for(auto sr:dp[j+1][i+d]){
                            dp[i][i+d].push_back(sl+sr);
                            dp[i][i+d].push_back(sr+sl);
                        }
        for(auto s:dp[0][n-1]) if(s==s2) return true;
        return false;
       
    }
};
