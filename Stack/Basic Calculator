EImplement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

You may assume that the given expression is always valid.

Some examples:

"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23

class Solution {
public:
    int calculate(string s) {
       int par = 0;
       int i=0;
       vector<int> mark(s.size(),0);
       int res = 0;
       char c=' ';
       stack<bool> isPosBefore;
       
       for(int i=0;i<s.size();++i){
           if(s[i]=='('){
               if(i==0 || s[i-1]=='+') 
                   isPosBefore.push(true);
               else {
                   isPosBefore.push(false);
                   ++par;
               }
           }
           else if(s[i]==')'){
               if(isPosBefore.top()) isPosBefore.pop();
               else{
               par--;
               isPosBefore.pop();
               }
           } 
           else mark[i]=par;
       }
       
       i=0;
       while(i<s.size()){
           if(s[i]=='+' && mark[i]%2!=0) s[i]='-';
           else if(s[i]=='-' && mark[i]%2!=0) s[i]='+';
           ++i;
       }
       
       for(int j=0;j<s.size();){
           if(isdigit(s[j])){
               int begin = j;
               int temp = 0;
               while(j<s.size() && isdigit(s[j])){ temp=temp*10 + (s[j]-'0');++j;}
               if(c==' '|| c=='+') res+=temp;
               else res-=temp;
           }
           else if(s[j]=='+' || s[j]=='-') c=s[j++];
           else ++j;
       }
       return res;
       
    }

};
Method II
class Solution {
public:
    int calculate(string s) {
        if(s.size()==0) return 0;
        for(int i=0;i<s.size();) 
          if(s[i]==' ') s.erase(s.begin()+i);
           else i++;
        if(s.size()==0) return 0;
       s="("+s+")";
       stack<int> nums;
       stack<char> ops;
       
       int i=0;
       while(i<s.size()){
           if(s[i]>='0' && s[i]<='9'){
           int temp=0;
           while(i<s.size() && s[i]>='0' && s[i]<='9') temp = temp*10 + (s[i++]-'0');
               nums.push(temp);
               --i;
           }
          else if(s[i]==')') {
              int temp2=0;
              while(ops.top()!='('){
                  if(ops.top()=='+')
                  temp2+=nums.top();
                  else 
                  temp2-=nums.top();
                  nums.pop();
                  ops.pop();
              }
              temp2+=nums.top();
              nums.pop();
              ops.pop();
              nums.push(temp2);
          }
          else ops.push(s[i]);
           ++i;
       }
      return nums.top();
      
       
    }

};
