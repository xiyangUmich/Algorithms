Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

class Solution {
private:
    bool isOneDiff(const string& A, const string& B) {
        if (A.size() != B.size())
            return false;
        int diff = 0;
        for (int i = 0; i < A.size(); ++i) {
            if (A[i] != B[i])
                ++diff;
            if (diff > 1)
                return false;
        }
        return diff == 1;
    }
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& dict) {
        if (dict.count(beginWord) == 0 || dict.count(endWord) == 0)
            return 0;

        queue<pair<string, int> > que;
        que.push(make_pair(beginWord, 1));
        dict.erase(beginWord);

        while (!que.empty()) {
            pair<string, int> cur = que.front(); que.pop();
            for (auto it = dict.begin(); it != dict.end(); ) {
                if (isOneDiff(cur.first, *it)) {
                    if (*it == endWord) return cur.second + 1;
                    que.push(make_pair(*it, cur.second + 1));
                    it = dict.erase(it);
                } else ++it;
            }
        }
        return 0;
    }
