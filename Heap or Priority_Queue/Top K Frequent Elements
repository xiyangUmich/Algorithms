class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
       vector<int> res;
       if(nums.size() == 0) return res;
       
       unordered_map<int, int> map;
       priority_queue<pair<int, int>> pq;
       
       for(auto n: nums) {
           map[n] ++;
       }
       
       for(auto m: map) {
           pq.push(make_pair(m.second, m.first));
       }
       
       int count = 0;
       while(!pq.empty() && count < k) {
           res.push_back(pq.top().second);
           pq.pop();
           count++;
       }
       
        return res;
    }
};

-------------------------------------------------------------------
Solution II :
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n = static_cast<int>(nums.size());
        vector<int> res;
        if(k > n) return res;
        unordered_map<int, int> map;
        
        for(auto n: nums) map[n]++;
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        for(auto m: map) {
            if(pq.size() < k) {
                auto curr = make_pair(m.second, m.first);
                pq.push(curr);
            }
            else if(pq.top().first < m.second) {
                    pq.pop();
                    auto curr = make_pair(m.second, m.first);
                    pq.push(curr);
            }
        }
        
        while(!pq.empty()) {
            res.push_back(pq.top().second);
            pq.pop();
        }
        
        reverse(res.begin(), res.end());
        return res;
    }
};
