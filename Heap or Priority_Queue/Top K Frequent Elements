class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
       vector<int> res;
       if(nums.size() == 0) return res;
       
       unordered_map<int, int> map;
       priority_queue<pair<int, int>> pq;
       
       for(auto n: nums) {
           map[n] ++;
       }
       
       for(auto m: map) {
           pq.push(make_pair(m.second, m.first));
       }
       
       int count = 0;
       while(!pq.empty() && count < k) {
           res.push_back(pq.top().second);
           pq.pop();
           count++;
       }
       
        return res;
    }
};
