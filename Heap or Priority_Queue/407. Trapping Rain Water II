class Solution {
private:    
  priority_queue<pair<int,int>, vector<pair<int,int>>,greater<pair<int,int>> > pq;
public:    
  int trapRainWater(vector<vector<int>>& heightMap) {        
    int m = heightMap.size();       
    if(m==0) return 0;        
    int n = heightMap[0].size();        
    if(n==0) return 0;                
    vector<vector<bool>> visited(m,vector<bool>(n,false));        
    for(int j = 0;j<n;++j){            
      visited[0][j] = true;           
      pq.push(make_pair(heightMap[0][j],j));            
      pq.push(make_pair(heightMap[m-1][j],(m-1)*n+j));            
      visited[m-1][j] = true;        
     }       
     for(int i = 0;i<m;++i){            
      visited[i][0] = true;            
      pq.push(make_pair(heightMap[i][0],i*n));            
      pq.push(make_pair(heightMap[i][n-1],i*n+n-1));            
      visited[i][n-1] = true;        
      }                
      int dx[4] = {-1,1,0,0};        
      int dy[4] = {0,0,-1,1};        
      int res = 0;        
      while(!pq.empty()){            
        auto curr = pq.top();            
        pq.pop();            
        for(int i = 0;i<4;++i){                
          int nx = curr.second/n+dx[i];                
          int ny = curr.second%n+dy[i];                
          if(nx>=0 && nx<m && ny>=0 && ny<n && !visited[nx][ny]){                    
            res+=max(0,curr.first-heightMap[nx][ny]);                    
            visited[nx][ny] = true;                    
            pq.push(make_pair(max(heightMap[nx][ny],curr.first),nx*n+ny));                
          }            
        }        
      }        
      return res;   
     }
    };
